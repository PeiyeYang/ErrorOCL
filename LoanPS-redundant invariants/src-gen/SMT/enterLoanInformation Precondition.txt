(declare-datatypes () ((LoanRequestStatus SUBMITTED REFERENCESVALIDATED APPROVED READYFORREVIEW INCOMPLETEINFORMATION)))
(declare-datatypes () ((LoanStatus LSOPEN CLOSED)))
(declare-datatypes () ((CheckingAccountStatus GOODSTANDING SUSPENDED)))
(declare-datatypes () ((LoanAccountStatus NORMAL HASPAIDINFULL)))
(declare-datatypes () ((Entity_LoanRequest (mk_LoanRequest (Status LoanRequestStatus)(RequestID Int)(Name String)(LoanAmount Real)(LoanPurpose String)(Income Real)(PhoneNumber Int)(PostalAddress String)(ZipCode Int)(Email String)(WorkReferences String)(CreditReferences String)(CheckingAccountNumber Int)(SecurityNumber Int)(CreditScore Int)))))
(declare-const Set_LoanRequest (Set Entity_LoanRequest))
(declare-const Seq_LoanRequest (Seq Entity_LoanRequest))
(declare-datatypes () ((Entity_Loan (mk_Loan (LoanID Int)(RemainAmountToPay Real)(Status LoanStatus)(IsPaidinFull Bool)(StartDate Int)(EndDate Int)(CurrentOverDueDate Int)(RePaymentDays Int)(RepaymentAmount Real)))))
(declare-const Set_Loan (Set Entity_Loan))
(declare-const Seq_Loan (Seq Entity_Loan))
(declare-datatypes () ((Entity_LoanTerm (mk_LoanTerm (ItemID Int)(Content String)))))
(declare-const Set_LoanTerm (Set Entity_LoanTerm))
(declare-const Seq_LoanTerm (Seq Entity_LoanTerm))
(declare-datatypes () ((Entity_CheckingAccount (mk_CheckingAccount (Balance Real)(Status CheckingAccountStatus)))))
(declare-const Set_CheckingAccount (Set Entity_CheckingAccount))
(declare-const Seq_CheckingAccount (Seq Entity_CheckingAccount))
(declare-datatypes () ((Entity_CreditHistory (mk_CreditHistory (OutstandingDebt Real)(BadDebits Int)))))
(declare-const Set_CreditHistory (Set Entity_CreditHistory))
(declare-const Seq_CreditHistory (Seq Entity_CreditHistory))
(declare-datatypes () ((Entity_LoanAccount (mk_LoanAccount (LoanAccountID Int)(Balance Real)(Status LoanAccountStatus)))))
(declare-const Set_LoanAccount (Set Entity_LoanAccount))
(declare-const Seq_LoanAccount (Seq Entity_LoanAccount))
(declare-datatypes () ((Entity_ApprovalLetter (mk_ApprovalLetter (Content String)))))
(declare-const Set_ApprovalLetter (Set Entity_ApprovalLetter))
(declare-const Seq_ApprovalLetter (Seq Entity_ApprovalLetter))
(declare-datatypes () ((Entity_LoanAgreement (mk_LoanAgreement (Content String)))))
(declare-const Set_LoanAgreement (Set Entity_LoanAgreement))
(declare-const Seq_LoanAgreement (Seq Entity_LoanAgreement))
(declare-fun Set_LoanRequest_ApprovalLoan (Entity_LoanRequest) (Set Entity_Loan))
(declare-fun Seq_LoanRequest_ApprovalLoan (Entity_LoanRequest) (Seq Entity_Loan))
(declare-fun Set_LoanRequest_RequestedCAHistory (Entity_LoanRequest) (Set Entity_CheckingAccount))
(declare-fun Seq_LoanRequest_RequestedCAHistory (Entity_LoanRequest) (Seq Entity_CheckingAccount))
(declare-fun Set_LoanRequest_RequestedCreditHistory (Entity_LoanRequest) (Set Entity_CreditHistory))
(declare-fun Seq_LoanRequest_RequestedCreditHistory (Entity_LoanRequest) (Seq Entity_CreditHistory))
(declare-fun Set_LoanRequest_AttachedApprovalLetter (Entity_LoanRequest) (Set Entity_ApprovalLetter))
(declare-fun Seq_LoanRequest_AttachedApprovalLetter (Entity_LoanRequest) (Seq Entity_ApprovalLetter))
(declare-fun Set_LoanRequest_AttachedLoanAgreement (Entity_LoanRequest) (Set Entity_LoanAgreement))
(declare-fun Seq_LoanRequest_AttachedLoanAgreement (Entity_LoanRequest) (Seq Entity_LoanAgreement))
(declare-fun Set_LoanRequest_AttachedLoanTerms (Entity_LoanRequest) (Set Entity_LoanTerm))
(declare-fun Seq_LoanRequest_AttachedLoanTerms (Entity_LoanRequest) (Seq Entity_LoanTerm))
(declare-fun Set_Loan_ReferedLoanRequest (Entity_Loan) (Set Entity_LoanRequest))
(declare-fun Seq_Loan_ReferedLoanRequest (Entity_Loan) (Seq Entity_LoanRequest))
(declare-fun Set_Loan_BelongedLoanAccount (Entity_Loan) (Set Entity_LoanAccount))
(declare-fun Seq_Loan_BelongedLoanAccount (Entity_Loan) (Seq Entity_LoanAccount))
(assert (forall ((p Entity_LoanRequest)) (=> (select Set_LoanRequest p) (forall ((p1 Entity_LoanRequest)) (=> (and (select Set_LoanRequest p1) (not (= p p1))) (not (= (RequestID p) (RequestID p1))))))))
(assert (forall ((p Entity_LoanRequest)) (=> (select Set_LoanRequest p) (>= (CreditScore p) 0))))
(assert (forall ((p Entity_Loan)) (=> (select Set_Loan p) (forall ((p1 Entity_Loan)) (=> (and (select Set_Loan p1) (not (= p p1))) (not (= (LoanID p) (LoanID p1))))))))
(assert (forall ((p Entity_Loan)) (=> (select Set_Loan p) (>= (RemainAmountToPay p) 0))))
(assert (forall ((p Entity_Loan)) (=> (select Set_Loan p) (>= (RepaymentAmount p) 0))))
(assert (forall ((p Entity_Loan)) (=> (select Set_Loan p) (>= (RePaymentDays p) 0))))
(assert (forall ((p Entity_LoanTerm)) (=> (select Set_LoanTerm p) (forall ((p1 Entity_Loan)) (=> (and (select Set_Loan p1) (not (= p p1))) (not (= (LoanID p) (LoanID p1))))))))
(assert (forall ((p Entity_CheckingAccount)) (=> (select Set_CheckingAccount p) (>= (Balance p) 0))))
(assert (forall ((p Entity_CreditHistory)) (=> (select Set_CreditHistory p) (>= (OutstandingDebt p) 0))))
(assert (forall ((p Entity_CreditHistory)) (=> (select Set_CreditHistory p) (>= (BadDebits p) 0))))
(assert (forall ((p Entity_LoanAccount)) (=> (select Set_LoanAccount p) (forall ((p1 Entity_Loan)) (=> (and (select Set_Loan p1) (not (= p p1))) (not (= (LoanID p) (LoanID p1))))))))
(assert (forall ((p Entity_LoanAccount)) (=> (select Set_LoanAccount p) (>= (Balance p) 0))))
(assert (exists((p Entity_LoanRequest)) (select Set_LoanRequest p)))
(assert (exists((p Entity_Loan)) (select Set_Loan p)))
(assert (exists((p Entity_LoanTerm)) (select Set_LoanTerm p)))
(assert (exists((p Entity_CheckingAccount)) (select Set_CheckingAccount p)))
(assert (exists((p Entity_CreditHistory)) (select Set_CreditHistory p)))
(assert (exists((p Entity_LoanAccount)) (select Set_LoanAccount p)))
(assert (exists((p Entity_ApprovalLetter)) (select Set_ApprovalLetter p)))
(assert (exists((p Entity_LoanAgreement)) (select Set_LoanAgreement p)))
(declare-const CurrentLoanRequest Entity_LoanRequest)
(declare-const requestid Int)
(declare-const name String)
(declare-const loanamount Real)
(declare-const loanpurpose String)
(declare-const income Real)
(declare-const phonenumber Int)
(declare-const postaladdress String)
(declare-const zipcode Int)
(declare-const email String)
(declare-const workreferences String)
(declare-const creditreferences String)
(declare-const checkingaccountnumber Int)
(declare-const securitynumber Int)
(declare-const result Bool)
(declare-const loanrequest Entity_LoanRequest)
(assert (ite (exists ((loa Entity_LoanRequest)) (and (select Set_LoanRequest loa) (= loanrequest loa) (select Set_LoanRequest loanrequest) (= (RequestID loa) requestid))) true (not(select Set_LoanRequest loanrequest))))
(assert (= (not (select Set_LoanRequest loanrequest)) true))
